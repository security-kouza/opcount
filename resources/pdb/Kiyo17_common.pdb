\\
\\ Copyright (c) 2017 NTT corp. - All Rights Reserved
\\
\\  This file is part of Opcount project which is released under Software
\\  License Agreement for Evaluation. See file LICENSE.pdf for full license
\\  details.
\\
\\ Rev.1.0 2017/12/18
\\ Common arithmetics that are not experimentally measured in Kiyo17_xxx.pdb.
\\ Usage: opcount Kiyo17_xxx.pdb Kiyo17_common.pdb < yyy.csdl | gp -q
\\
\\ Updated(1.0): paring_batch to internally count TARGET_mul


\\ Pari/gp setting
default(realprecision,16) ;
default(format, "g.5") ;

\\ Built-in functions
call_rnd             = 0 ;
call_prod(n,x)       = n * x;

\\
\\ GROUP0 arithmetics
\\
\\ Multi-base exponentiation for k-bit exponents by wNAF with whole or block or no table lookup.
GROUP0_endmorphism  = FM;

\\ w>0, k>0, n>=0, m>=0
\\ w=1 is the binary method
Bitexp_wNAF(w,k,n,m,time_mul,time_square,time_div) = {
	if(w<=2,
		cost_tbl_sqr = 0;
		cost_tbl_mul = 0;
		,
	   	cost_tbl_sqr = 1;
		cost_tbl_mul = 2^(w-2)-1;
	);
	cost_ave_mul = k  / (w+1);  \\ average number of non-zero bits in each k-bit exponent
	slop = 0.5;  \\ assumption: wNAF causes a sloppy bit with probability 1/2

	ttl = n * (
	  cost_tbl_sqr * time_square   \\ table making
	+ cost_tbl_mul * time_mul      \\ table making
	+ cost_ave_mul * time_mul)     \\ multiplication for each non-zero bit
	+ min(1,n) * (k + slop) * time_square \\ squaring k+slop bits
	+ m * time_mul;

	return (ttl);
};



GROUP0_bitexp(k,n,m) = Bitexp_wNAF(GROUP0_wNAF,k,n,m, GROUP0_mul, GROUP0_square, GROUP0_mul);
	
\\ Multi-base exponentiation by 2-GLV method for each exponentiation
GROUP0_GLV2(n,m) = Bitexp_wNAF(GROUP0_wNAF,ceil(Order/2),2*n,m, GROUP0_mul, GROUP0_square, GROUP0_mul);

GROUP0_batch(n,m) = GROUP0_GLV2(n,m);

\\
\\ GROUP1 arithmetics
\\
\\ Multi-base exponentiation for k-bit exponents 

\\ degree for GLS method
GROUP1_GLS_deg 	  = eulerphi(EmbDeg);
GROUP1_frobenius  = (ExtDeg-1) * FM;

GROUP1_bitexp(k,n,m) = Bitexp_wNAF(GROUP1_wNAF,k,n,m,GROUP1_mul,GROUP0_square, GROUP1_mul);
	
\\ Computing multi-base exponentiation in group1 with x-GLS method
GROUP1_GLSX(x,n,m) = Bitexp_wNAF(GROUP1_wNAF, ceil(Order/x), x*n, m, GROUP1_mul, GROUP1_square, GROUP1_mul);

GROUP1_batch(n,m) = GROUP1_GLSX(GROUP1_GLS_deg,n,m);


\\
\\ TARGET group arithmetics
\\
\\ Multi-base exponentiation for k-bit exponents by the binary method with or without table look-ups
\\ degree for GLS method
TARGET_GLS_deg 	  = eulerphi(EmbDeg);
TARGET_frobenius  = (EmbDeg-1) * FM;

TARGET_bitexp(k,n,m) = Bitexp_wNAF(TARGET_wNAF,k,n,m, TARGET_mul, TARGET_square, TARGET_inv);
	
\\ Computing multi-base exponentiation in G_t with x-GLS method

TARGET_GLSX(x,n,m) = Bitexp_wNAF(TARGET_wNAF, ceil(Order/x), x*n, m, TARGET_mul, TARGET_square, TARGET_inv);

TARGET_batch(n,m) = TARGET_GLSX(TARGET_GLS_deg,n,m);


\\ Division
TARGET_div = TARGET_inv + TARGET_mul;


\\
\\ Computing product of n pairings
\\
pairing_batch(n)     = n * Miller_Loop + min(n,1) * Final_Exponentiation + (n-1) * TARGET_mul ;


\\
\\ MISC operations
\\
GROUP0_assign        = 0 ;
GROUP1_assign        = 0 ;
INTEGER_assign       = 0 ;
LIST_VARIABLE_assign = 0 ;
LIST_LITERAL_assign  = 0 ;
INTEGER_mul          = 0 ;
TARGET_eq            = 0 ;
INTEGER_uminus       = 0 ;
INTEGER_sub          = 0 ;
INTEGER_add          = 0 ;
INTEGER_logical_and  = 0 ;
TARGET_assign	     = 0 ;
GROUP_assign         = 0 ;
INTEGER_eq	     = 0 ;

