// A CSDL file of KPW 15 scheme 
//
// Copyright (c) 2017 NTT corp. - All Rights Reserved
//
//  This file is part of Opcount project which is released under Software
//  License Agreement for Evaluation. See file LICENSE.pdf for full license
//  details.
//


inline "

  for_statement(A_,B_,C_,D_) = {
    eval(A_);
    A_=0;
    while(eval(B_),A_++;eval(C_));
    return(A_ * D_) ;
  }

  if_statement(A_,B_,C_) = {
    return (if_prob * B_ + (1 - if_prob) * C_) ;
  }

  ni = 10;
  if_prob = 1/2 ;

" ;


// KPW15 presented at CRYPTO2015
// M in G0

// global parameters
integer Sep;   // security parameter specified in PerfDB
integer Order;   // group order (=q)

group0 G;     // default generator for the left group
group1 Gh;     // default generator for the right group
target Gt;     // default generator for the target group Gt = e(G, Gh);

integer rnd(){
}

group0 rnd_g(){
  integer r;
  return G^r;
}

group1 rnd_gh(){
  integer r;
  return Gh^r;
}

// dummy functions for x^(-1)
group0 inv0(group0 x){
  return x;
}

group1 inv1(group1 x){
  return x;
}



//
//// basic functions
//

// pargen
list KPW15_pargen(){
	group0 g;
	group1 gh;
	g=rnd_g();
	gh=rnd_gh();
	
	return (g, gh);
}


////////////////////////////////////////////////
// Scheme 
// Special case k=1, SXDH setting

KPW15_gen(){
	group0 g;
	group1 gh;
	
	g=rnd_g();
	gh=rnd_gh();

	integer a1, a2, b1, b2, kb01, kb02, kbi1, kbi2;
	
	a=rnd();
	b=rnd();

	kb01=rnd();
	kb02=rnd();
	
	integer i;
	for(i=1; i<11; i++){
		kbi1=rnd();
		kbi2=rnd();
		}		
		
	integer kk011, kk012, kk021, kk022;
	integer kk111, kk112, kk121, kk122;
	integer cb0, cbi;
	integer cc01, cc02, cc11, cc12;
			
	cb0=(kb01*a1) + (kb02*a2);
	
	for(i=1; i<11; i++){
		cbi=(kbi1*a1) + (kbi2*a2);
		}		
		
	cc01=(kk011*a1) + (kk012*a2);
	cc02=(kk021*a1) + (kk022*a2);
	cc11=(kk111*a1) + (kk112*a2);
	cc12=(kk121*a1) + (kk122*a2);
	

	integer pp01, pp02, pp11, pp12;
		
	pp01=(b1*kk011) + (b2*kk021);
	pp02=(b1*kk012) + (b2*kk022);
	pp11=(b1*kk111) + (b2*kk121);
	pp12=(b1*kk112) + (b2*kk122);

	group0 P01, P02, P11, P12, B1, B2;
	group1 Ch01, Ch02, Ch11, Ch12, Ah1, Ah2;
	group1 Cbhi, Cbh0;	
	
	P01=g^(pp01);
	P02=g^(pp02);
	P11=g^(pp11);
	P12=g^(pp12);

	B1=g^(b1);
	B2=g^(b2);

	Ch01=gh^(cc01);
	Ch02=gh^(cc02);
	Ch11=gh^(cc11);
	Ch12=gh^(cc12);

	Cbh0=gh^(cb0);
	
	for(i=1; i<11; i++){
		Cbhi=gh^(cbi);
	}

	Ah1=gh^(a1);
	Ah2=gh^(a2);
	
	list sk, pk;
	sk=(kb01, kb02, kbi1, kbi2, P01, P02, P11, P12, B1, B2);
	pk=(g, gh, Ch01, Ch02, Ch11, Ch12, Cbh0, Cbhi, Ah1, Ah2);
	
	return (pk, sk);
}


KPW15_sign(list pk, list sk, group0 mui){

	group0 P01, P02, P11, P12, B1, B2, g;
	group1 Ch01, Ch02, Ch11, Ch12, Ah1, Ah2, gh;
	group1 Cbh0, Cbhi;
	
	integer kb01, kb02, kbi1, kbi2;
	
	(kb01, kb02, kbi1, kbi2, P01, P02, P11, P12, B1, B2)=sk;
	(g, gh, Ch01, Ch02, Ch11, Ch12, Cbh0, Cbhi, Ah1, Ah2)=pk;

	integer r, tau;
	group0 sig11, sig12, sig21, sig22, sig31, sig32;
	group1 Tah;

	group0 Mbi1, Mbi2;

	Mbi1=1;
	Mbi2=1;

	integer i;
	for(i=1; i<11; i++){
		Mbi1=Mbi1 * (mui^(kbi1));
		}	

	for(i=1; i<11; i++){
		Mbi2=Mbi2 * (mui^(kbi2));
		}	

	r=rnd();
	tau=rnd();

	group0 KB01;
	KB01=g^(kbi1);

	sig11=(g^(kb01))*Mbi1*(P01^r)*(P11^(r*tau));
	sig12=(g^(kb02))*(Mbi2)*(P02^r)*(P12^(r*tau));
	
	sig21=B1^r;
	sig22=B2^r;

	sig31=B1^(r*tau);
	sig32=B2^(r*tau);

	Tah=gh^(tau);
	
	list sigma;
	sigma=(sig11, sig12, sig21, sig22, sig31, sig32, Tah);
	
	return sigma;

}


KPW15_verify(list pk, group0 mui, list sigma){

	group0 P01, P02, P11, P12, B1, B2, g;
	group1 Ch01, Ch02, Ch11, Ch12, Ah1, Ah2, gh;
	group1 Cbh0, Cbhi;

	group0 sig11, sig12, sig21, sig22, sig31, sig32;
	group1 Tah;

	(sig11, sig12, sig21, sig22, sig31, sig32, Tah)=sigma;
	(g, gh, Ch01, Ch02, Ch11, Ch12, Cbh0, Cbhi, Ah1, Ah2)=pk;

	target  ev1, ev2;
	integer retv;
		
	ev1 = e(sig11^(-1), Ah1)*e(sig12^(-1), Ah2)* e(G, Cbh0) * product(11,e(mui, Cbhi)) * e(sig21, Ch01) * e(sig22, Ch02) * e( sig31, Ch11) *  e( sig32, Ch12);
	ev2 = e((sig21*sig22)^(-1), Tah) * e((sig31*sig32), gh);

	if( ev1 ==1 && ev2==1, retv=1, retv=0);

	return retv;
}

